import review_scraper_driver as rsd
import sentimentanalyzer as sa

###################################################################
# Rescoring Movie
###################################################################
def rescore_movie(movie_url, sentiment_strengths):
    '''
        This function uses the constructed sentiment_strengths dictionary
        to rescore a movie using that movie's reviews.

        Inputs:
            movie_url: A str object containing the Rotten Tomatoes webpage
                of the movie to be rescored.
            
            sentiment_strengths: A dict object mapping words, bigrams, and
                trigrams to values characterizing their association with
                negative and positive reviews.
        
        Returns:
            Nothing is returned. However, this function prints the appropriate
                movie title, audience score, critic score, and the score
                awared by a sentiment analysis of the movie's reviews.
    '''
    reviews = {}
    rsd.read_movie_page(movie_url, reviews)
    if reviews:
        title, info = list(reviews.items())[0]
        revs = info[0]
        total_sentiment = 0
        num_reviews = 0
        for rev in revs.keys():
            rev = str(rev)
            raw_score = sa.get_sentiment(rev, sentiment_strengths)
            sentiment = sa.normalize_score(raw_score)
            total_sentiment += sentiment
            num_reviews += 1
        avg_sentiment = total_sentiment / num_reviews
        print((f"Movie Title: {title},\tAudience Score: {info[1]},\t"
               f"Critic Score: {info[2]},\t"
               f"Sentiment Analyzer Score: {avg_sentiment: .2f}"))
    else:
        print("No reviews found.")

###################################################################
# Adding Sentiment Scores.
###################################################################
def add_sentiment_scores(scores_csv, reviews_csv, sentiment_strengths, \
                         file_name, reviews=None):
    '''
        This function creates a csv with rows containing a movie title, that
        movie's audience score, its critic score, its Rotten Tomatoes rating,
        and its score awarded by a sentiment analysis of the movie's reviews.

        Inputs:
            scores_csv: A str object containing the name of a csv file
                generated by the review_scraper_driver.py gen_csv function.

            reviews_csv: A str object containing the name of a csv file
                generated by the review_scraper_driver.py
                gen_csv_reviews_text function.
            
            sentiment_strengths: A dict object as described in rescore_movie.

            file_name: A string containing the name of the csv file
                to be created.
            
            reviews: The reviews dict object described in the
                review_scraper_driver.py read_movie_page function.
                If it is not passed in, we generate it.
        
        Returns:
            Nothing is returned. A csv file as described in the
                the review_scraper_driver.py gen_csv function is created.
    '''
    if not reviews:
        reviews = rsd.gen_revs_from_csvs(scores_csv, reviews_csv, False)
    for movie, info in reviews.items():
        revs = info[0]
        # If there are no reviews, we make the sentiment analyzer score None.
        if not revs:
            info += [None]
            reviews[movie] = info
            continue
        total_sa_score = 0
        num_revs = 0
        for rev in revs.keys():
            rev = str(rev)
            raw_score = sa.get_sentiment(rev, sentiment_strengths)
            sa_score = sa.normalize_score(raw_score)
            total_sa_score += sa_score
            num_revs += 1
        info += [str(total_sa_score / num_revs)]
        reviews[movie] = info
    rsd.gen_csv(reviews, file_name, sa_scores=True)